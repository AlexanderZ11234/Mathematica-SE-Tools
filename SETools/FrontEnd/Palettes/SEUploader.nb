Notebook[{
Cell[BoxData[
 DynamicModuleBox[{SETools`SEUploader`Private`progress$$ = False}, 
  TagBox[GridBox[{
     {
      TagBox[
       ButtonBox[
        PaneSelectorBox[{False->
         GraphicsBox[
          TagBox[RasterBox[CompressedData["
1:eJztm71u1EAQx1dAQXmPYN7gCj/AQUtzCjWSEwlKOAUklG4rKop7BNdU5g3c
0KektMQLuKUyu7nxZTKenV1f7Ls9x5H+Ue72w7MzP89+2Hl19fni4zOl1JeX
5tfF5bfX19eXN+9emA9vbr5+uHpu/kiMciP7ZdM0s2adXD/+/FsbVUbNQLJ9
bU49riGUfvq5NSpByantGWA8OqbxAHtDcUelQ2wwPyvQMtRuW7dtN3K8bJwa
0KjXOhJ/UY1n4LxHVQey14DKHvyVqN1ofowtXlMbz4js3WnmLy7FNp6Zv/OK
1zyeYTXzd1zFNp73v/7qMTXzF5diG49hpBlTp+LP/KyNtNEGfbeE488SaWO0
GCJepjwzytH5RquNkfMaqP0C+ihIe/t5HcjXAq6H227as5Y+4zE/mVFB/JX7
7nfwu9Xa4Xf9BPjD5QujLfpMdetiMCReEPMC1eNUSfGGc0apfQO2SPfK0ujW
0bYGtr3jAX8Vgr8azBDTfh9PiG9N2z8x/m4Z3joMHsIfxLx2sMJ938ljtl+G
1TZ/UZ5ygT16vdrxnXM8kKswL3Wbsxi/bT38VRx7T5C/vb/aPOfIidkB/FUk
titSTnNSTXMY4q90XEMThhKPnTXm3P7tyIs+v5V0XmDyWccWxu9161vge78m
MoyUYyoi/jpsQb1Cur7EH8xnOJ7s8xuYnzGnmqnTiaPAObUjIXZw99GCYfBB
PyQWNWUP1dOoXhHAXyc+sehI/DmfRavdPgX7iuYmiT+85ss9/OD1HTvXe9rn
Lr7S3f5iP3cLfdD7gPKH5wN2boV6iRQz4k8tjevt99/lmIqEv0654C/KmMSf
uJYidR+s8Q7gD8/BmpRhNp3c+MZzqM/6lDH8NWPqTPirDuTPO/e66gt18PmL
ax9M+StdZT35Y/cKPk2IP+/7CiHMHMCfs24ofyE2S7wCd9x+uS9/2SP4682e
jcOE+AuKI+Orx/I3ev6DtRfLa7rbn9LzFw1MrkB4jpX40x47QvnbqPv34iR1
9ihnxt/CxxLTZukbY0/+8PVpXgrlT7yGtP4j18gd7aX1H94HHWX9F+rPAP70
mAq0F+cf1v+kPt6nsXtJFb7/zSR/efjzcoPq4v1vKXDseg4j8YfLKsEG3/4X
n0WJHA/FXwxS3XPglVB3SeqyjKvw8z9cr3OW5eEPn//ZtVsixB2v7TJSLs7j
affsjvJHz/9C+uD4w/ei8/xvSP6IPYMr0N5EdfdeWqGzdaijSZ3K5SOGvwd9
qvt/xRK5l/iDct/zjxVhr/L0UZCyJSln13hp9/nHitgQ+vyjIv7tsKx2a6YM
8iXXx1nxx9x7Iao53zj4o2xXTH+5wz8+/ujeYT/HpvyzVy430edrtl7hYMbF
H2dHzfSBP3Ps0PP41l8lkjj/9OQvdM8/Kn8oJ3F5i6qU2GP4W3v67fgwlD+U
X2iO4ngMfc+LyjKD53rWXmDQFc879gnr7HjUbo3DvaPB5YDH5j967w0pNqcE
cLhW3ff0rLbceAP4W6Eci99ny339Qdw1SOKnfe+Ovrtnz02yEJvT+3OWtq3d
s6xR/60dznsv3a0Fc2LD3nbEoFXi8SH1Vyut4N0+RzutyLuXnnGHvHvWmz0p
XmOL42/WdDRUrhtLM3/TVszsWc38TVsxs2c18zdtxcye1czftBUze1bq/v/f
rE62D5o1a1ac+g+gcmvt
            "], {{0, 32}, {160, 0}}, {0, 255},
            ColorFunction->RGBColor],
           BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
           Selectable->False],
          BaseStyle->"ImageGraphics",
          ImageSizeRaw->{160, 32},
          PlotRange->{{0, 160}, {0, 32}}]}, False,
         BaseStyle->{None},
         FrameMargins->0,
         ImageSize->Automatic],
        BaseStyle->"Hyperlink",
        ButtonData->{
          URL["https://github.com/halirutan/Mathematica-SE-Tools"], None},
        ButtonNote->"https://github.com/halirutan/Mathematica-SE-Tools"],
       Annotation[#, "https://github.com/halirutan/Mathematica-SE-Tools", 
        "Hyperlink"]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = True}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              StyleBox["\<\"Uploading\"\>", "SmallText",
               StripOnInput->False]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              StyleBox["\<\"Uploading\"\>", "SmallText",
               StripOnInput->False]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox["\<\"Image\"\>",
                    Appearance->Automatic,
                    ButtonFunction:>SETools`SEUploader`Private`uploadButton[],
                    
                    Evaluator->Automatic,
                    ImageSize->{140, Automatic},
                    Method->"Preemptive"],
                    
                    "\"Upload the selected expression as an image to \
StackExchange\"",
                    TooltipDelay->Automatic,
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "Upload the selected expression as an image to \
StackExchange", "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox["\<\"Image (pp)\"\>",
                    Appearance->Automatic,
                    
                    ButtonFunction:>
                    SETools`SEUploader`Private`uploadPPButton[],
                    Enabled->Dynamic[
                    Or[$OperatingSystem === "Windows", 
                    And[$OperatingSystem === "MacOSX", $VersionNumber >= 9]], 
                    TrackedSymbols :> {$OperatingSystem, $VersionNumber}],
                    Evaluator->Automatic,
                    ImageSize->{140, Automatic},
                    Method->"Preemptive"],
                    
                    "\"Upload the selected expression as an image to \
StackExchange (pixel-perfect rasterization)\"",
                    TooltipDelay->Automatic,
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "Upload the selected expression as an image to \
StackExchange (pixel-perfect rasterization)", "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox["\<\"Selected Cell\"\>",
                    Appearance->Automatic,
                    
                    ButtonFunction:>(
                    SETools`SEUploader`Private`progress$$ = True; 
                    SETools`SEUploader`Private`uploadExpression[
                    SETools`SEUploader`Private`encodeSelection[]]; 
                    SETools`SEUploader`Private`progress$$ = False; Null),
                    Evaluator->Automatic,
                    ImageSize->{140, Automatic},
                    Method->"Queued"],
                    
                    "\"Encode the selected cell(s) into an image to share \
code\"",
                    TooltipDelay->Automatic,
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "Encode the selected cell(s) into an image to share code",
                     "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox["\<\"Selected Notebook\"\>",
                    Appearance->Automatic,
                    
                    ButtonFunction:>(
                    SETools`SEUploader`Private`progress$$ = True; 
                    SETools`SEUploader`Private`uploadExpression[
                    SETools`SEUploader`Private`encodeCurrentNotebook[]]; 
                    SETools`SEUploader`Private`progress$$ = False),
                    Evaluator->Automatic,
                    ImageSize->{140, Automatic},
                    Method->"Queued"],
                    
                    "\"Encode the selected notebook into an image to share \
code\"",
                    TooltipDelay->Automatic,
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "Encode the selected notebook into an image to share \
code", "Tooltip"]& ]},
                  {
                   DynamicBox[ToBoxes[
                    If[SETools`SEUploader`Private`progress$$, 
                    ProgressIndicator[
                    Appearance -> "Percolate", ImageSize -> {64, 10}], 
                    Invisible[
                    ProgressIndicator[
                    Appearance -> "Percolate", ImageSize -> {64, 10}]]], 
                    StandardForm],
                    ImageSizeCache->{33., {6., 9.}},
                    TrackedSymbols:>{SETools`SEUploader`Private`progress$$}]}
                 },
                 DefaultBaseStyle->"Column",
                 GridBoxAlignment->{"Columns" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Style["Uploading", "SmallText"], 
           Column[{
             Tooltip[
              Button["Image", 
               SETools`SEUploader`Private`uploadButton[], 
               ImageSize -> {140, Automatic}], 
              "Upload the selected expression as an image to StackExchange", 
              TooltipDelay -> Automatic], 
             Tooltip[
              Button["Image (pp)", 
               SETools`SEUploader`Private`uploadPPButton[], 
               ImageSize -> {140, Automatic}, Enabled -> Dynamic[
                 Or[$OperatingSystem === "Windows", 
                  And[$OperatingSystem === "MacOSX", $VersionNumber >= 9]], 
                 TrackedSymbols :> {$OperatingSystem, $VersionNumber}]], 
              "Upload the selected expression as an image to StackExchange \
(pixel-perfect rasterization)", TooltipDelay -> Automatic], 
             Tooltip[
              Button[
              "Selected Cell", SETools`SEUploader`Private`progress$$ = True; 
               SETools`SEUploader`Private`uploadExpression[
                 SETools`SEUploader`Private`encodeSelection[]]; 
               SETools`SEUploader`Private`progress$$ = False; Null, 
               ImageSize -> {140, Automatic}, Method -> "Queued"], 
              "Encode the selected cell(s) into an image to share code", 
              TooltipDelay -> Automatic], 
             Tooltip[
              Button[
              "Selected Notebook", 
               SETools`SEUploader`Private`progress$$ = True; 
               SETools`SEUploader`Private`uploadExpression[
                 SETools`SEUploader`Private`encodeCurrentNotebook[]]; 
               SETools`SEUploader`Private`progress$$ = False, 
               ImageSize -> {140, Automatic}, Method -> "Queued"], 
              "Encode the selected notebook into an image to share code", 
              TooltipDelay -> Automatic], 
             Dynamic[
              If[SETools`SEUploader`Private`progress$$, 
               ProgressIndicator[
               Appearance -> "Percolate", ImageSize -> {64, 10}], 
               Invisible[
                ProgressIndicator[
                Appearance -> "Percolate", ImageSize -> {64, 10}]]], 
              TrackedSymbols :> {SETools`SEUploader`Private`progress$$}]}, 
            Center]}, True]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = True}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              StyleBox["\<\"Miscellaneous\"\>", "SmallText",
               StripOnInput->False]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              StyleBox["\<\"Miscellaneous\"\>", "SmallText",
               StripOnInput->False]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox["\<\"History\"\>",
                    Appearance->Automatic,
                    ButtonFunction:>SETools`SEUploader`Private`historyButton[],
                    Evaluator->Automatic,
                    ImageSize->{140, Automatic},
                    Method->"Preemptive"],
                    "\"See previously uploaded images and copy their URLs\"",
                    TooltipDelay->Automatic,
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "See previously uploaded images and copy their URLs", 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    DynamicBox[ToBoxes[
                    Style["Update", 
                    If[
                    CurrentValue[$FrontEnd, {
                    TaggingRules, "SEUploaderVersion"}, {
                    "Version" -> 126, 
                    "Changes" -> {
                    "Fixed the hashing algorithm to MD5 so that you can \
decode images with that where encoded with a different version"}}] =!= {
                    "Version" -> 126, 
                    "Changes" -> {
                    "Fixed the hashing algorithm to MD5 so that you can \
decode images with that where encoded with a different version"}}, 
                    RGBColor[
                    0.8588235294117647, 0.00784313725490196, 
                    0.00784313725490196], Black]], StandardForm],
                    ImageSizeCache->{30., {8., 8.}}],
                    Appearance->Automatic,
                    ButtonFunction:>SETools`SEUploader`Private`updateButton[],
                    
                    Evaluator->Automatic,
                    ImageSize->{140, Automatic},
                    Method->"Preemptive"],
                    "\"Check for newer versions of the uploader palette\"",
                    TooltipDelay->Automatic,
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "Check for newer versions of the uploader palette", 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox["\<\"About\"\>",
                    Appearance->Automatic,
                    ButtonFunction:>MessageDialog[
                    Column[{
                    Image[CompressedData["
1:eJztm71u1EAQx1dAQXmPYN7gCj/AQUtzCjWSEwlKOAUklG4rKop7BNdU5g3c
0KektMQLuKUyu7nxZTKenV1f7Ls9x5H+Ue72w7MzP89+2Hl19fni4zOl1JeX
5tfF5bfX19eXN+9emA9vbr5+uHpu/kiMciP7ZdM0s2adXD/+/FsbVUbNQLJ9
bU49riGUfvq5NSpByantGWA8OqbxAHtDcUelQ2wwPyvQMtRuW7dtN3K8bJwa
0KjXOhJ/UY1n4LxHVQey14DKHvyVqN1ofowtXlMbz4js3WnmLy7FNp6Zv/OK
1zyeYTXzd1zFNp73v/7qMTXzF5diG49hpBlTp+LP/KyNtNEGfbeE488SaWO0
GCJepjwzytH5RquNkfMaqP0C+ihIe/t5HcjXAq6H227as5Y+4zE/mVFB/JX7
7nfwu9Xa4Xf9BPjD5QujLfpMdetiMCReEPMC1eNUSfGGc0apfQO2SPfK0ujW
0bYGtr3jAX8Vgr8azBDTfh9PiG9N2z8x/m4Z3joMHsIfxLx2sMJ938ljtl+G
1TZ/UZ5ygT16vdrxnXM8kKswL3Wbsxi/bT38VRx7T5C/vb/aPOfIidkB/FUk
titSTnNSTXMY4q90XEMThhKPnTXm3P7tyIs+v5V0XmDyWccWxu9161vge78m
MoyUYyoi/jpsQb1Cur7EH8xnOJ7s8xuYnzGnmqnTiaPAObUjIXZw99GCYfBB
PyQWNWUP1dOoXhHAXyc+sehI/DmfRavdPgX7iuYmiT+85ss9/OD1HTvXe9rn
Lr7S3f5iP3cLfdD7gPKH5wN2boV6iRQz4k8tjevt99/lmIqEv0654C/KmMSf
uJYidR+s8Q7gD8/BmpRhNp3c+MZzqM/6lDH8NWPqTPirDuTPO/e66gt18PmL
ax9M+StdZT35Y/cKPk2IP+/7CiHMHMCfs24ofyE2S7wCd9x+uS9/2SP4682e
jcOE+AuKI+Orx/I3ev6DtRfLa7rbn9LzFw1MrkB4jpX40x47QvnbqPv34iR1
9ihnxt/CxxLTZukbY0/+8PVpXgrlT7yGtP4j18gd7aX1H94HHWX9F+rPAP70
mAq0F+cf1v+kPt6nsXtJFb7/zSR/efjzcoPq4v1vKXDseg4j8YfLKsEG3/4X
n0WJHA/FXwxS3XPglVB3SeqyjKvw8z9cr3OW5eEPn//ZtVsixB2v7TJSLs7j
affsjvJHz/9C+uD4w/ei8/xvSP6IPYMr0N5EdfdeWqGzdaijSZ3K5SOGvwd9
qvt/xRK5l/iDct/zjxVhr/L0UZCyJSln13hp9/nHitgQ+vyjIv7tsKx2a6YM
8iXXx1nxx9x7Iao53zj4o2xXTH+5wz8+/ujeYT/HpvyzVy430edrtl7hYMbF
H2dHzfSBP3Ps0PP41l8lkjj/9OQvdM8/Kn8oJ3F5i6qU2GP4W3v67fgwlD+U
X2iO4ngMfc+LyjKD53rWXmDQFc879gnr7HjUbo3DvaPB5YDH5j967w0pNqcE
cLhW3ff0rLbceAP4W6Eci99ny339Qdw1SOKnfe+Ovrtnz02yEJvT+3OWtq3d
s6xR/60dznsv3a0Fc2LD3nbEoFXi8SH1Vyut4N0+RzutyLuXnnGHvHvWmz0p
XmOL42/WdDRUrhtLM3/TVszsWc38TVsxs2c18zdtxcye1czftBUze1bq/v/f
rE62D5o1a1ac+g+gcmvt
                    "], "Byte", ColorSpace -> "RGB", 
                    Interleaving -> True], 
                    Style[
                    "This palette was developed to ease the uploading of \
Mathematica content to its dedicated stackexchange site. You can upload \
images of graphics, expressions and cells. To share code, it is possible to \
encode cells or whole notebooks into an image.", "Label", LineIndent -> 0, 
                    TextJustification -> 1.], 
                    Style[
                    "For more information, you can visit the following \
places:", "Label", LineIndent -> 0, TextJustification -> 1.], 
                    Hyperlink[
                    Style[
                    "\[FilledCircle] The official post at stackexchange", 
                    "Label", LineIndent -> 0, TextJustification -> 1.], 
                    "http://meta.mathematica.stackexchange.com/q/5/187"], 
                    Hyperlink[
                    Style[
                    "\[FilledCircle] The GitHub repository of this project", 
                    "Label", LineIndent -> 0, TextJustification -> 1.], 
                    "https://github.com/halirutan/Mathematica-SE-Tools"], 
                    Style[
                    "\[Copyright] 2012\[Dash]2015 The StackExchange \
Community", "Label", LineIndent -> 0, TextJustification -> 1.]}, 
                    Dividers -> {False, {False, True}}, Spacings -> 1]],
                    Evaluator->Automatic,
                    ImageSize->{140, Automatic},
                    Method->"Preemptive"],
                    "\"Check for newer versions of the uploader palette\"",
                    TooltipDelay->Automatic,
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "Check for newer versions of the uploader palette", 
                    "Tooltip"]& ]}
                 },
                 DefaultBaseStyle->"Column",
                 GridBoxAlignment->{"Columns" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Style["Miscellaneous", "SmallText"], 
           Column[{
             Tooltip[
              Button["History", 
               SETools`SEUploader`Private`historyButton[], 
               ImageSize -> {140, Automatic}], 
              "See previously uploaded images and copy their URLs", 
              TooltipDelay -> Automatic], 
             Tooltip[
              Button[
               Dynamic[
                Style["Update", 
                 If[
                 CurrentValue[$FrontEnd, {
                    TaggingRules, "SEUploaderVersion"}, {
                    "Version" -> 126, 
                    "Changes" -> {
                    "Fixed the hashing algorithm to MD5 so that you can \
decode images with that where encoded with a different version"}}] =!= {
                   "Version" -> 126, 
                    "Changes" -> {
                    "Fixed the hashing algorithm to MD5 so that you can \
decode images with that where encoded with a different version"}}, 
                  RGBColor[
                  0.8588235294117647, 0.00784313725490196, 
                   0.00784313725490196], Black]]], 
               SETools`SEUploader`Private`updateButton[], 
               ImageSize -> {140, Automatic}], 
              "Check for newer versions of the uploader palette", 
              TooltipDelay -> Automatic], 
             Tooltip[
              Button["About", 
               MessageDialog[
                Column[{
                  Image[CompressedData["
1:eJztm71u1EAQx1dAQXmPYN7gCj/AQUtzCjWSEwlKOAUklG4rKop7BNdU5g3c
0KektMQLuKUyu7nxZTKenV1f7Ls9x5H+Ue72w7MzP89+2Hl19fni4zOl1JeX
5tfF5bfX19eXN+9emA9vbr5+uHpu/kiMciP7ZdM0s2adXD/+/FsbVUbNQLJ9
bU49riGUfvq5NSpByantGWA8OqbxAHtDcUelQ2wwPyvQMtRuW7dtN3K8bJwa
0KjXOhJ/UY1n4LxHVQey14DKHvyVqN1ofowtXlMbz4js3WnmLy7FNp6Zv/OK
1zyeYTXzd1zFNp73v/7qMTXzF5diG49hpBlTp+LP/KyNtNEGfbeE488SaWO0
GCJepjwzytH5RquNkfMaqP0C+ihIe/t5HcjXAq6H227as5Y+4zE/mVFB/JX7
7nfwu9Xa4Xf9BPjD5QujLfpMdetiMCReEPMC1eNUSfGGc0apfQO2SPfK0ujW
0bYGtr3jAX8Vgr8azBDTfh9PiG9N2z8x/m4Z3joMHsIfxLx2sMJ938ljtl+G
1TZ/UZ5ygT16vdrxnXM8kKswL3Wbsxi/bT38VRx7T5C/vb/aPOfIidkB/FUk
titSTnNSTXMY4q90XEMThhKPnTXm3P7tyIs+v5V0XmDyWccWxu9161vge78m
MoyUYyoi/jpsQb1Cur7EH8xnOJ7s8xuYnzGnmqnTiaPAObUjIXZw99GCYfBB
PyQWNWUP1dOoXhHAXyc+sehI/DmfRavdPgX7iuYmiT+85ss9/OD1HTvXe9rn
Lr7S3f5iP3cLfdD7gPKH5wN2boV6iRQz4k8tjevt99/lmIqEv0654C/KmMSf
uJYidR+s8Q7gD8/BmpRhNp3c+MZzqM/6lDH8NWPqTPirDuTPO/e66gt18PmL
ax9M+StdZT35Y/cKPk2IP+/7CiHMHMCfs24ofyE2S7wCd9x+uS9/2SP4682e
jcOE+AuKI+Orx/I3ev6DtRfLa7rbn9LzFw1MrkB4jpX40x47QvnbqPv34iR1
9ihnxt/CxxLTZukbY0/+8PVpXgrlT7yGtP4j18gd7aX1H94HHWX9F+rPAP70
mAq0F+cf1v+kPt6nsXtJFb7/zSR/efjzcoPq4v1vKXDseg4j8YfLKsEG3/4X
n0WJHA/FXwxS3XPglVB3SeqyjKvw8z9cr3OW5eEPn//ZtVsixB2v7TJSLs7j
affsjvJHz/9C+uD4w/ei8/xvSP6IPYMr0N5EdfdeWqGzdaijSZ3K5SOGvwd9
qvt/xRK5l/iDct/zjxVhr/L0UZCyJSln13hp9/nHitgQ+vyjIv7tsKx2a6YM
8iXXx1nxx9x7Iao53zj4o2xXTH+5wz8+/ujeYT/HpvyzVy430edrtl7hYMbF
H2dHzfSBP3Ps0PP41l8lkjj/9OQvdM8/Kn8oJ3F5i6qU2GP4W3v67fgwlD+U
X2iO4ngMfc+LyjKD53rWXmDQFc879gnr7HjUbo3DvaPB5YDH5j967w0pNqcE
cLhW3ff0rLbceAP4W6Eci99ny339Qdw1SOKnfe+Ovrtnz02yEJvT+3OWtq3d
s6xR/60dznsv3a0Fc2LD3nbEoFXi8SH1Vyut4N0+RzutyLuXnnGHvHvWmz0p
XmOL42/WdDRUrhtLM3/TVszsWc38TVsxs2c18zdtxcye1czftBUze1bq/v/f
rE62D5o1a1ac+g+gcmvt
                   "], "Byte", ColorSpace -> "RGB", 
                   Interleaving -> True], 
                  Style[
                  "This palette was developed to ease the uploading of \
Mathematica content to its dedicated stackexchange site. You can upload \
images of graphics, expressions and cells. To share code, it is possible to \
encode cells or whole notebooks into an image.", "Label", LineIndent -> 0, 
                   TextJustification -> 1.], 
                  Style[
                  "For more information, you can visit the following places:",
                    "Label", LineIndent -> 0, TextJustification -> 1.], 
                  Hyperlink[
                   Style[
                   "\[FilledCircle] The official post at stackexchange", 
                    "Label", LineIndent -> 0, TextJustification -> 1.], 
                   "http://meta.mathematica.stackexchange.com/q/5/187"], 
                  Hyperlink[
                   Style[
                   "\[FilledCircle] The GitHub repository of this project", 
                    "Label", LineIndent -> 0, TextJustification -> 1.], 
                   "https://github.com/halirutan/Mathematica-SE-Tools"], 
                  Style[
                  "\[Copyright] 2012\[Dash]2015 The StackExchange Community", 
                   "Label", LineIndent -> 0, TextJustification -> 1.]}, 
                 Dividers -> {False, {False, True}}, Spacings -> 1]], 
               ImageSize -> {140, Automatic}], 
              "Check for newer versions of the uploader palette", 
              TooltipDelay -> Automatic]}, Center]}, True]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, True}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{
     "Columns" -> {{Automatic}}, "Rows" -> {0, 2, Automatic}}],
   "Column"],
  DynamicModuleValues:>{},
  Initialization:>(Block[{$ContextPath}, 
     Map[Needs, {"JLink`", "SETools`SEImageExpressionEncode`"}]]; 
   JLink`InstallJava[]; SETools`SEUploader`Private`pnb = EvaluationNotebook[]; 
   SETools`SEUploader`Private`closeButton[] := DefaultButton["Close", 
      DialogReturn[], ImageSize -> CurrentValue["DefaultButtonSize"], 
      ImageMargins -> {{2, 2}, {10, 10}}]; 
   SETools`SEUploader`Private`checkOnlineVersion[] := 
    Module[{SETools`SEUploader`Private`onlineVersion$}, Quiet[
        Check[
        SETools`SEUploader`Private`onlineVersion$ = 
         Import["https://raw.githubusercontent.com/halirutan/Mathematica-SE-\
Tools/master/SETools/Version.m"], 
         Return[$Failed]]]; 
      CurrentValue[$FrontEnd, {TaggingRules, "SEUploaderLastUpdateCheck"}] = 
       AbsoluteTime[]; 
      CurrentValue[$FrontEnd, {TaggingRules, "SEUploaderVersion"}] = 
       SETools`SEUploader`Private`onlineVersion$]; 
   If[AbsoluteTime[] > 
     3 3600 24 + 
      CurrentValue[$FrontEnd, {TaggingRules, "SEUploaderLastUpdateCheck"}, 0], 
     TimeConstrained[
      SETools`SEUploader`Private`checkOnlineVersion[], 6]]; 
   SETools`SEUploader`Private`updateButton[] := 
    Module[{SETools`SEUploader`Private`res$, 
       SETools`SEUploader`Private`newVersionQ$, 
       SETools`SEUploader`Private`newVersionInformation$, 
       SETools`SEUploader`Private`st$ = Style[
         SlotSequence[1], "Label", LineIndent -> 0, TextJustification -> 
         1.]& }, SETools`SEUploader`Private`res$ = 
       SETools`SEUploader`Private`checkOnlineVersion[]; 
      SETools`SEUploader`Private`newVersionInformation$ = 
       CurrentValue[$FrontEnd, {TaggingRules, "SEUploaderVersion"}, {
         "Version" -> 126, 
          "Changes" -> {
           "Fixed the hashing algorithm to MD5 so that you can decode images \
with that where encoded with a different version"}}]; 
      SETools`SEUploader`Private`newVersionQ$ = 
       And[SETools`SEUploader`Private`res$ =!= $Failed, 
         SETools`SEUploader`Private`newVersionInformation$ =!= {
          "Version" -> 126, 
           "Changes" -> {
            "Fixed the hashing algorithm to MD5 so that you can decode images \
with that where encoded with a different version"}}]; CreateDialog[
        Pane[
         Column[{
           SETools`SEUploader`Private`st$["Update information", 14], 
           SETools`SEUploader`Private`st$[
            StringForm["Installed version: ``", 
             ReplaceAll[
             "Version", {
              "Version" -> 126, 
               "Changes" -> {
                "Fixed the hashing algorithm to MD5 so that you can decode \
images with that where encoded with a different version"}}]]], 
           If[SETools`SEUploader`Private`res$ =!= $Failed, 
            SETools`SEUploader`Private`st$[
             StringForm["Online version: ``", 
              ReplaceAll[
              "Version", SETools`SEUploader`Private`newVersionInformation$]]], 
            SETools`SEUploader`Private`st$[
            "Update check failed.  Please check your internet connection."]], 
           
           If[SETools`SEUploader`Private`newVersionQ$, 
            Column[
             Join[{
               SETools`SEUploader`Private`st$[
               "Changes in the new version:", Bold]}, 
              Map[SETools`SEUploader`Private`st$[
                StringJoin["\[FilledCircle] ", #]]& , 
               ReplaceAll[
               "Changes", 
                SETools`SEUploader`Private`newVersionInformation$]]]], 
            Unevaluated[
             Sequence[]]], 
           Row[{
             Hyperlink[
              SETools`SEUploader`Private`st$["Open home page"], 
              "https://github.com/halirutan/Mathematica-SE-Tools"], " | ", 
             Hyperlink[
              SETools`SEUploader`Private`st$["History of changes"], 
              "https://github.com/halirutan/Mathematica-SE-Tools/commits/\
master"]}], 
           
           With[{SETools`SEUploader`Private`updateNotebookEnc$ = 
             "1:eJyNU0tvEzEQTml5ShWIExck0wup1OymEFUFiUNpAgRaHnUAAarAu5lNrHrtlT\
1LUm4gcYA7nPkB/AIu3PgLIC7cEBKIA0cu4NmkjwQh9eCZ+cYz45nP9qnIrCX7S6WSO+\
TFdYMQGbORTJBnyosV6XAHLYNSyT5C00N02Zo8qwsUyeRIyuTuFD7njdtZW6DUnbCpHQqlvMmwC4yj\
iDdYox93he4AaxmjHD/\
oEzjEKI0enEel1nIF7uiw5nIR3pIpOKCIrfXqw5d7pRPfl249f3uf9Mtn8UfSV368/\
kR6rLML3ripQDhgsTJeCr3JTAaaZUIBIjnaDB4LlQsPqOHEKGV61L6fATiVakEf99jnxLDPr09/F/\
0df3/64b99DSgnFi6afkFv4ThA1U3P+5Kp3XRz2mimmbHIKfABX/\
dypouYufNhaEUv6Ejs5lHuwMZGI2gMYpOGXaGkzVHocFX42VJ/\
Q7Go8EaluIYwFQ7BhrwxgMObAxukM8U565yeTlNn+V7H31rvrv0pxv71JnhE+ue3k59JXy2/\
KHRR6Ya/h7G6R7xxV+\
q26XH5BHY2iYUmUbg4Xy30uVp1LHV6O3VV2I7UbjR7FMmWt9xhj5ZyNAUvYwFnS/\
8P2KbgkvVkN3T7Dljn3zIPvG++GlT9I7JsReq8z/\
qLC6y8UKtEEmdZuQ4xpBFYVptjZ6rztdmxosfoY+CmgjokUkv6II4TKR6LXGGgo79fuQOw"}, 
            Pane[
             If[SETools`SEUploader`Private`newVersionQ$, 
              ChoiceButtons[{"Update"}, {CreateDocument[
                  Uncompress[SETools`SEUploader`Private`updateNotebookEnc$]]; 
                DialogReturn[]}], 
              SETools`SEUploader`Private`closeButton[]], ImageSize -> 400, 
             Alignment -> Right]]}, Dividers -> {None, {False, True, False}}, 
          Spacings -> {0, {Automatic, 2, Automatic, 1}}], ImageSize -> 400], 
        WindowTitle -> "Update information"]]; 
   MessageName[SETools`SEUploader`Private`stackImage, "httperr"] = 
    "Server returned respose code: `1`"; 
   MessageName[SETools`SEUploader`Private`stackImage, "err"] = 
    "Server returner error: `1`"; 
   MessageName[SETools`SEUploader`Private`stackImage, "parseErr"] = 
    "Could not parse the answer of the server."; 
   SETools`SEUploader`Private`stackImage[
      Pattern[SETools`SEUploader`Private`g, 
       Blank[]]] := 
    Module[{
      SETools`SEUploader`Private`url, SETools`SEUploader`Private`client, 
       SETools`SEUploader`Private`method, SETools`SEUploader`Private`data, 
       SETools`SEUploader`Private`partSource, SETools`SEUploader`Private`part,
        SETools`SEUploader`Private`entity, SETools`SEUploader`Private`code, 
       SETools`SEUploader`Private`response, SETools`SEUploader`Private`error, 
       SETools`SEUploader`Private`result, 
       SETools`SEUploader`Private`parseXMLOutput}, 
      SETools`SEUploader`Private`parseXMLOutput[
         Pattern[SETools`SEUploader`Private`str, 
          Blank[String]]] := 
       Block[{SETools`SEUploader`Private`xml = 
          ImportString[SETools`SEUploader`Private`str, {"HTML", "XMLObject"}],
           SETools`SEUploader`Private`result}, 
         SETools`SEUploader`Private`result = ReplaceAll[
            Cases[SETools`SEUploader`Private`xml, XMLElement["script", 
               Blank[], 
               Pattern[SETools`SEUploader`Private`res, 
                Blank[]]] :> StringTrim[SETools`SEUploader`Private`res], 
             Infinity], {{
               Pattern[SETools`SEUploader`Private`s, 
                Blank[String]]}} :> SETools`SEUploader`Private`s]; If[
           And[SETools`SEUploader`Private`result =!= {}, 
            StringMatchQ[SETools`SEUploader`Private`result, 
             StringExpression["window.parent", 
              BlankSequence[]]]], 
           Flatten[
            StringCases[
            SETools`SEUploader`Private`result, 
             StringExpression["window.parent.", 
               Pattern[SETools`SEUploader`Private`func, 
                BlankSequence[]], "(", 
               Pattern[SETools`SEUploader`Private`arg, 
                BlankSequence[]], ");"] :> {
               StringMatchQ[SETools`SEUploader`Private`func, "closeDialog"], 
               StringTrim[SETools`SEUploader`Private`arg, "\""]}]], $Failed]]; 
      SETools`SEUploader`Private`parseXMLOutput[
         BlankNullSequence[]] := $Failed; 
      SETools`SEUploader`Private`data = 
       ExportString[SETools`SEUploader`Private`g, "PNG"]; 
      JLink`JavaBlock[
       JLink`LoadJavaClass[
         "de.halirutan.se.tools.SEUploader", 
          SETools`SEUploader`Private`StaticsVisible -> True]; 
        SETools`SEUploader`Private`response = Check[
           SEUploader`sendImage[
            ToCharacterCode[SETools`SEUploader`Private`data]], 
           Return[$Failed]]]; 
      If[SETools`SEUploader`Private`response === $Failed, 
        Return[$Failed]]; 
      SETools`SEUploader`Private`result = 
       SETools`SEUploader`Private`parseXMLOutput[
        SETools`SEUploader`Private`response]; 
      If[SETools`SEUploader`Private`result =!= $Failed, 
        If[
         TrueQ[
          First[SETools`SEUploader`Private`result]], 
         Last[SETools`SEUploader`Private`result], Message[
           MessageName[SETools`SEUploader`Private`stackImage, "err"], 
           Last[SETools`SEUploader`Private`result]]; $Failed], Message[
          MessageName[
          SETools`SEUploader`Private`stackImage, "parseErr"]]; $Failed]]; 
   SETools`SEUploader`Private`copyToClipboard[
      Pattern[SETools`SEUploader`Private`text, 
       Blank[]]] := 
    Module[{SETools`SEUploader`Private`nb}, 
      SETools`SEUploader`Private`nb = NotebookCreate[Visible -> False]; 
      NotebookWrite[SETools`SEUploader`Private`nb, 
        Cell[SETools`SEUploader`Private`text, "Input"]]; 
      SelectionMove[SETools`SEUploader`Private`nb, All, Notebook]; 
      FrontEndTokenExecute[SETools`SEUploader`Private`nb, "Copy"]; 
      NotebookClose[SETools`SEUploader`Private`nb]; Null]; 
   SETools`SEUploader`Private`historyButton[] := CreateDialog[
      Column[{
        Style["Click a thumbnail to copy its URL.", Bold], 
        Dynamic[
         Grid[
          Partition[
           PadRight[
            Apply[Tooltip[
              
              Button[#, SETools`SEUploader`Private`copyToClipboard[#2]; 
               DialogReturn[], Appearance -> "Palette"], #2, TooltipDelay -> 
              Automatic]& , 
             CurrentValue[
             SETools`SEUploader`Private`pnb, {
              TaggingRules, "ImageUploadHistory"}, {}], {1}], 9, ""], 3]]], 
        Item[
         Row[{
           Spacer[200], 
           Button[
           "Clear all", 
            CurrentValue[
             SETools`SEUploader`Private`pnb, {
              TaggingRules, "ImageUploadHistory"}] = {}, ImageSize -> 
            CurrentValue["DefaultButtonSize"]], 
           Spacer[10], 
           SETools`SEUploader`Private`closeButton[]}], Alignment -> Right]}], 
      WindowTitle -> "History"]; 
   SETools`SEUploader`Private`uploadButton[] := 
    With[{SETools`SEUploader`Private`img = 
       SETools`SEUploader`Private`rasterizeSelection1[]}, 
      If[SETools`SEUploader`Private`img === $Failed, 
       Beep[], 
       SETools`SEUploader`Private`uploadWithPreview[
       SETools`SEUploader`Private`img]]]; 
   SETools`SEUploader`Private`uploadPPButton[] := 
    With[{SETools`SEUploader`Private`img = 
       SETools`SEUploader`Private`rasterizeSelection2[]}, 
      If[SETools`SEUploader`Private`img === $Failed, 
       Beep[], 
       SETools`SEUploader`Private`uploadWithPreview[
       SETools`SEUploader`Private`img]]]; 
   SETools`SEUploader`Private`uploadExpression[
      Pattern[SETools`SEUploader`Private`img, 
       Blank[]]] := If[Head[SETools`SEUploader`Private`img] =!= Image, 
      MessageDialog["Invalid selection."], 
      If[ByteCount[SETools`SEUploader`Private`img]/2.^20 > 1., 
       MessageDialog["Expressions bigger then 1 MB are not allowed."], 
       SETools`SEUploader`Private`uploadButtonAction[
       SETools`SEUploader`Private`img, "Import[\"http://goo.gl/NaH6rM\"][\"", 
        "\"]"]]]; SETools`SEUploader`Private`uploadButtonAction[
      Pattern[SETools`SEUploader`Private`img, 
       Blank[]]] := 
    SETools`SEUploader`Private`uploadButtonAction[
     SETools`SEUploader`Private`img, "![Mathematica graphics](", ")"]; 
   SETools`SEUploader`Private`uploadButtonAction[
      Pattern[SETools`SEUploader`Private`img$, 
       Blank[]], 
      Pattern[SETools`SEUploader`Private`wrapStart$, 
       Blank[String]], 
      Pattern[SETools`SEUploader`Private`wrapEnd$, 
       Blank[String]]] := 
    Module[{SETools`SEUploader`Private`url$, 
       SETools`SEUploader`Private`markdown$}, 
      Check[SETools`SEUploader`Private`url$ = 
        SETools`SEUploader`Private`stackImage[
         SETools`SEUploader`Private`img$], 
        Return[]]; 
      SETools`SEUploader`Private`markdown$ = 
       StringJoin[
        SETools`SEUploader`Private`wrapStart$, 
         SETools`SEUploader`Private`url$, 
         SETools`SEUploader`Private`wrapEnd$]; 
      SETools`SEUploader`Private`copyToClipboard[
       SETools`SEUploader`Private`markdown$]; PrependTo[
        CurrentValue[
        SETools`SEUploader`Private`pnb, {
         TaggingRules, "ImageUploadHistory"}], {
         Thumbnail[
          Image[SETools`SEUploader`Private`img$]], 
         SETools`SEUploader`Private`url$}]; If[Length[
          CurrentValue[
          SETools`SEUploader`Private`pnb, {
           TaggingRules, "ImageUploadHistory"}]] > 9, 
        CurrentValue[
         SETools`SEUploader`Private`pnb, {
          TaggingRules, "ImageUploadHistory"}] = Most[
          CurrentValue[
          SETools`SEUploader`Private`pnb, {
           TaggingRules, "ImageUploadHistory"}]]]; Null]; 
   SETools`SEUploader`Private`screenHeight[] := -Apply[Subtract, 
       Part[
        ReplaceAll[ScreenRectangle, 
         Options[$FrontEnd, ScreenRectangle]], 2]]; 
   SETools`SEUploader`Private`uploadWithPreview[
      Pattern[SETools`SEUploader`Private`img, 
       Blank[Image]]] := CreateDialog[
      Column[{
        Style[
        "Upload image to StackExchange network?\nThe URL/MarkDown will be \
copied to the clipboard.", Bold], 
        Pane[
         Image[SETools`SEUploader`Private`img, Magnification -> 1], {
         Automatic, 
          Min[SETools`SEUploader`Private`screenHeight[] - 140, 1 + Part[
             ImageDimensions[SETools`SEUploader`Private`img], 2]]}, 
         Scrollbars -> Automatic, AppearanceElements -> {}, ImageMargins -> 
         0], 
        Item[
         ChoiceButtons[{"Upload for site", "Upload for chat", "Close"}, {
          SETools`SEUploader`Private`uploadButtonAction[
            SETools`SEUploader`Private`img]; DialogReturn[], 
           SETools`SEUploader`Private`uploadButtonAction[
            SETools`SEUploader`Private`img, "", ""]; DialogReturn[], 
           DialogReturn[]}], Alignment -> Right]}], WindowTitle -> 
      "Upload image to StackExchange?"]; 
   SETools`SEUploader`Private`rasterizeSelection1[
      Optional[
       Pattern[SETools`SEUploader`Private`maxWidth, 
        Blank[]], 650]] := 
    Module[{SETools`SEUploader`Private`target, 
       SETools`SEUploader`Private`selection, 
       SETools`SEUploader`Private`image}, 
      SETools`SEUploader`Private`selection = NotebookRead[
         SelectedNotebook[]]; If[
        MemberQ[
         Hold[{}, $Failed, 
          NotebookRead[$Failed]], 
         SETools`SEUploader`Private`selection], $Failed, 
        SETools`SEUploader`Private`target = 
         CreateDocument[{}, WindowSelected -> False, Visible -> False, 
           WindowSize -> SETools`SEUploader`Private`maxWidth]; 
        NotebookWrite[
         SETools`SEUploader`Private`target, 
          SETools`SEUploader`Private`selection]; 
        SETools`SEUploader`Private`image = 
         Rasterize[SETools`SEUploader`Private`target, "Image"]; 
        NotebookClose[SETools`SEUploader`Private`target]; 
        SETools`SEUploader`Private`image]]; 
   SETools`SEUploader`Private`rasterizeSelection2[] := If[
      MemberQ[
       Hold[{}, $Failed, 
        NotebookRead[$Failed]], 
       NotebookRead[
        SelectedNotebook[]]], $Failed, 
      Module[{SETools`SEUploader`Private`tag}, FrontEndExecute[
         FrontEndToken[
          FrontEnd`SelectedNotebook[], "CopySpecial", 
          If[$OperatingSystem === "Windows", "MGF", "TIFF"]]]; 
       Catch[ReplaceAll[
           NotebookGet[
            ClipboardNotebook[]], Pattern[SETools`SEUploader`Private`r, 
             Blank[RasterBox]] :> Block[{}, 
             Condition[
              Throw[
               Image[
                First[SETools`SEUploader`Private`r], "Byte", ColorSpace -> 
                "RGB"], SETools`SEUploader`Private`tag], True]]]; $Failed, 
         SETools`SEUploader`Private`tag]]]; 
   SETools`SEUploader`Private`encodeSelection[] := 
    With[{SETools`SEUploader`Private`expr = NotebookRead[
         SelectedNotebook[]]}, 
      If[
       Or[
        MemberQ[
         Hold[{}, $Failed, 
          NotebookRead[$Failed]], SETools`SEUploader`Private`expr], 
        Not[
         Or[Head[SETools`SEUploader`Private`expr] === Cell, 
          MatchQ[SETools`SEUploader`Private`expr, {
            Repeated[
             Blank[Cell]]}]]]], $Failed, 
       SETools`SEImageExpressionEncode`SEEncodeExpression[
       SETools`SEUploader`Private`expr]]]; 
   SETools`SEUploader`Private`encodeCurrentNotebook[] := 
    With[{SETools`SEUploader`Private`nb = NotebookGet[
         SelectedNotebook[]]}, 
      If[Head[SETools`SEUploader`Private`nb] =!= Notebook, $Failed, 
       SETools`SEImageExpressionEncode`SEEncodeExpression[
       SETools`SEUploader`Private`nb]]]; Null)]]]
},
WindowSize->All,
WindowElements->{},
WindowTitle->"SE Uploader",
TaggingRules->{"ImageUploadHistory" -> {}},
StyleDefinitions->"Palette.nb"
]