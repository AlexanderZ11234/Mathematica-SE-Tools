Notebook[{
  Cell[BoxData[
    DynamicModuleBox[{},
      DynamicBox[ToBoxes[
        Column[{
          Image[CompressedData["
1:eJztm01oE0EUgJekYhTFHARXodIKiqIi/tCCFEUPoihSItLopabSYq1VSQsl
1GIOPfYoeNCSHIqgtP705E1BLwp6EI8VVCqIBwV7kaLEt8kuPtqZeWu6O7NN
3sBX0tl5b2d2v+zvpLnrWqonZlnWQAL+pDJDR7LZTO5MA/xzNDfY3RWHD01A
EXAqS6VSGTt1Ow7sBs4C6QA4BKz18jOMDPBkJ/AOKAXMHJAxPT4muoAf64DZ
ENzDnDI9TiaagBs3QnbP4b3pcTLRBNyY0uDfHyBheqxM9AAvnmvwz8E2PVYm
eoAXbUC7BlaK1g9lBWC7rFH1FUoCtQ3seAolifKKWG16PwUJGlfSdF/Ai83A
dg3EJdui1XkM5JIntlsnapsOcH88QnlFXDe9nwIc6yo0roem+2P6/Mv+sX/s
nzUCPF3AK/aP/dPhn2Rdh9k/9o/9Y/+i7h+UnBPrg2zY/kE5R/ShhYhvJeKV
3zso64n4Uco/ZzsRORoFMbvQ8j2oflCVy66B+18oc6hexawG/6aJPvQT8VeJ
+CdE/A6f20Ll3xci7qAgJo2Wd6L6r6pctvnnf+xffftXC+dfz79vwCUFzn3u
Y5e+oPyDcgLlHSP6UEBtNwpybQHaFfSj+OMo7o5bN02sf1jkH5QrKO8IkWPK
bXdP4t8blCutGk+N+TdDxO9H8XcD9O8yattNtH2A2m71e1xF8adRfC+q/+TW
fSfimyX+jaP6fUSOD267nxL/MBtUudg/9o/9Y//Q8otW5ZpJxg8N/vlF5p9z
Deu9Y46xf8vKP+r+AxNV/zpVfYgS7F+5Lo6OF/j+wJR/zn2c6hjsMYPiq/IP
jksXgLwGhHOr2L9y3TZUN2lV5pnJwOsKy79NVRxHqvXvmabzr/A6lP1b5N99
Ir6nxvyb0ODeL1v+/sPZ9t6zorylfvY1gNq2Cfyr6vkflBbBuvB5cFyw/BiK
X9LzP2d/o7oCET8h8S/I53/nif3gcTIA//o0+PfC53foJhqDiKIkbknvPyx6
/p+Ij5JcYb//wPQK4nW8//BY8v0HuNEAvA3RvXlgL/vH/ikcTAIFu/J78aC8
+w28Bg747YdVuebKK2gn/PtMxAvnv0DpIOJECK8JrfDnv2AWbVuLnv+C6ZD0
gZr/4pFDMcL5L//pYQxoBJp8Minwbshdpu03O9Y//17qWidjHnCsuMC9YRP9
YP/qkwX+jZrqB/tXnyD/xkz2g/2rT1z/bpnuB/u3fPkLmaii+g==
       "], "Byte",
            ColorSpace -> "RGB", Interleaving -> True],
          OpenerView[{
            Style["Uploading", "Text"],
            Column[{
              Tooltip[
                Button["Image",
                  SEUploader`Private`uploadButton[],
                  Sequence[ImageSize -> {140, Automatic}]],
                "Upload the selected expression as an image to StackExchange",
                TooltipDelay -> Automatic],
              If[True,
                Tooltip[
                  Button["Image (pp)",
                    SEUploader`Private`uploadPPButton[],
                    Sequence[ImageSize -> {140, Automatic}], Enabled ->
                    Or[$OperatingSystem === "Windows",
                      And[$OperatingSystem === "MacOSX", $VersionNumber >= 9]]],
                  "Upload the selected expression as an image to StackExchange \
(pixel-perfect rasterization)", TooltipDelay -> Automatic],
                Unevaluated[
                  Sequence[]]],
              Tooltip[
                Button["Selected Cell",
                  SEUploader`Private`uploadExpression[
                    SEUploader`Private`encodeSelection[]],
                  Sequence[ImageSize -> {140, Automatic}]],
                "Encode the selected cell(s) into an image to share code",
                TooltipDelay -> Automatic],
              Tooltip[
                Button["Selected Notebook",
                  SEUploader`Private`uploadExpression[
                    SEUploader`Private`encodeCurrentNotebook[]],
                  Sequence[ImageSize -> {140, Automatic}]],
                "Encode the selected notebook into an image to share code",
                TooltipDelay -> Automatic]}]}, True],
          OpenerView[{
            Style["Miscellaneous", "Text"],
            Column[{
              Tooltip[
                Button["History",
                  SEUploader`Private`historyButton[],
                  Sequence[ImageSize -> {140, Automatic}]],
                "See previously uploaded images and copy their URLs", TooltipDelay ->
                Automatic],
              Tooltip[
                Button["Update",
                  SEUploader`Private`updateButton[],
                  Sequence[ImageSize -> {140, Automatic}], Background -> Dynamic[
                  If[
                    CurrentValue[$FrontEnd, {TaggingRules, "SEUploaderVersion"},
                      10] =!= 10,
                    RGBColor[
                      0.8588235294117647, 0.00784313725490196, 0.00784313725490196],
                    Automatic]]],
                "Check for newer versions of the uploader palette", TooltipDelay ->
                Automatic],
              Tooltip[
                Button["About",
                  SEUploader`Private`updateButton[],
                  Sequence[ImageSize -> {140, Automatic}]],
                "Check for newer versions of the uploader palette", TooltipDelay ->
                Automatic]}]}, True]}, Dividers -> {None, {False, True}},
          Spacings -> {Automatic, 1}], StandardForm],
        ImageSizeCache -> {160., {136., 141.}}],
      DynamicModuleValues :> {},
      Initialization :> (Block[{$ContextPath},
        Map[Needs, {"JLink`", "SETools`SEImageExpressionEncode`"}]];
      JLink`InstallJava[]; SEUploader`Private`pnb = EvaluationNotebook[];
      SEUploader`Private`closeButton[] := DefaultButton["Close",
        DialogReturn[], ImageSize -> CurrentValue["DefaultButtonSize"],
        ImageMargins -> {{2, 2}, {10, 10}}];
      SEUploader`Private`checkOnlineVersion[] :=
        Module[{SEUploader`Private`onlineVersion$}, Quiet[
          Check[
            SEUploader`Private`onlineVersion$ =
              Import["https://raw.githubusercontent.com/halirutan/Mathematica-SE-\
Tools/master/SETools/Version.m"],
            Return[$Failed]]];
        CurrentValue[$FrontEnd, {TaggingRules, "SEUploaderLastUpdateCheck"}] =
          AbsoluteTime[];
        CurrentValue[$FrontEnd, {TaggingRules, "SEUploaderVersion"}] =
          SEUploader`Private`onlineVersion$];
      If[AbsoluteTime[] >
        3 3600 24 +
          CurrentValue[$FrontEnd, {TaggingRules, "SEUploaderLastUpdateCheck"}, 0],
        TimeConstrained[
          SEUploader`Private`checkOnlineVersion[], 6]];
      SEUploader`Private`updateButton[] :=
        Module[{SEUploader`Private`res$},
          SEUploader`Private`res$ = SEUploader`Private`checkOnlineVersion[];
          CreateDialog[
            Column[{
              StringForm["`1`\nInstalled version: `2`\n\n`3`",
                If[SEUploader`Private`res$ =!= $Failed,
                  StringJoin["Online version: ",
                    ToString[
                      CurrentValue[$FrontEnd, {TaggingRules, "SEUploaderVersion"}]]],
                  "Update check failed.  Please check your internet connection."],
                10,
                Row[{
                  Hyperlink[
                    "Open home page",
                    "http://meta.mathematica.stackexchange.com/a/32/12"], " | ",
                  Hyperlink[
                    "History of changes",
                    "https://github.com/szhorvat/SEUploader/commits/master"]}]],
              Pane[
                If[
                  And[
                    SEUploader`Private`res$ =!= $Failed,
                    CurrentValue[$FrontEnd, {TaggingRules, "SEUploaderVersion"}, 10] =!=
                      10, FileNameSplit[
                    NotebookDirectory[SEUploader`Private`pnb]] === Join[
                    FileNameSplit[$UserBaseDirectory], {
                      "SystemFiles", "FrontEnd", "Palettes"}]],

                  ChoiceButtons[{"Update to new version"}, {
                    SEUploader`Private`onlineUpdate[]; DialogReturn[]}],
                  SEUploader`Private`closeButton[]], ImageSize -> 340, Alignment ->
                Right]}], WindowTitle -> "Version information"]];
      MessageName[SEUploader`Private`stackImage, "httperr"] =
        "Server returned respose code: `1`";
      MessageName[SEUploader`Private`stackImage, "err"] =
        "Server returner error: `1`";
      MessageName[SEUploader`Private`stackImage, "parseErr"] =
        "Could not parse the answer of the server."; SEUploader`Private`stackImage[
        Pattern[SEUploader`Private`g,
          Blank[]]] :=
        Module[{SEUploader`Private`url, SEUploader`Private`client,
          SEUploader`Private`method, SEUploader`Private`data,
          SEUploader`Private`partSource, SEUploader`Private`part,
          SEUploader`Private`entity, SEUploader`Private`code,
          SEUploader`Private`response, SEUploader`Private`error,
          SEUploader`Private`result, SEUploader`Private`parseXMLOutput},
          SEUploader`Private`parseXMLOutput[
            Pattern[SEUploader`Private`str,
              Blank[String]]] :=
            Block[{SEUploader`Private`xml =
              ImportString[SEUploader`Private`str, {"HTML", "XMLObject"}],
              SEUploader`Private`result}, SEUploader`Private`result = ReplaceAll[
              Cases[SEUploader`Private`xml, XMLElement["script",
                Blank[],
                Pattern[SEUploader`Private`res,
                  Blank[]]] :> StringTrim[SEUploader`Private`res],
                Infinity], {{
                Pattern[SEUploader`Private`s,
                  Blank[String]]}} :> SEUploader`Private`s]; If[
              And[SEUploader`Private`result =!= {},
                StringMatchQ[SEUploader`Private`result,
                  StringExpression["window.parent",
                    BlankSequence[]]]],
              Flatten[
                StringCases[
                  SEUploader`Private`result, StringExpression["window.parent.",
                  Pattern[SEUploader`Private`func,
                    BlankSequence[]], "(",
                  Pattern[SEUploader`Private`arg,
                    BlankSequence[]], ");"] :> {
                  StringMatchQ[SEUploader`Private`func, "closeDialog"],
                  StringTrim[SEUploader`Private`arg, "\""]}]], $Failed]];
          SEUploader`Private`parseXMLOutput[
            BlankNullSequence[]] := $Failed;
          SEUploader`Private`data = ExportString[SEUploader`Private`g, "PNG"];
          JLink`JavaBlock[
            JLink`LoadJavaClass[
              "de.halirutan.se.tools.SEUploader",
              SEUploader`Private`StaticsVisible -> True];
            SEUploader`Private`response = Check[
              SEUploader`sendImage[
                ToCharacterCode[SEUploader`Private`data]],
              Return[$Failed]]]; If[SEUploader`Private`response === $Failed,
            Return[$Failed]];
          SEUploader`Private`result =
            SEUploader`Private`parseXMLOutput[SEUploader`Private`response];
          If[SEUploader`Private`result =!= $Failed,
            If[
              TrueQ[
                First[SEUploader`Private`result]],
              Last[SEUploader`Private`result], Message[
              MessageName[SEUploader`Private`stackImage, "err"],
              Last[SEUploader`Private`result]]; $Failed], Message[
            MessageName[SEUploader`Private`stackImage, "parseErr"]]; $Failed]];
      SEUploader`Private`copyToClipboard[
        Pattern[SEUploader`Private`text,
          Blank[]]] :=
        Module[{SEUploader`Private`nb},
          SEUploader`Private`nb = NotebookCreate[Visible -> False];
          NotebookWrite[SEUploader`Private`nb,
            Cell[SEUploader`Private`text, "Input"]];
          SelectionMove[SEUploader`Private`nb, All, Notebook];
          FrontEndTokenExecute[SEUploader`Private`nb, "Copy"];
          NotebookClose[SEUploader`Private`nb]; Null];
      SEUploader`Private`historyButton[] := CreateDialog[
        Column[{
          Style["Click a thumbnail to copy its URL.", Bold],
          Dynamic[
            Grid[
              Partition[
                PadRight[
                  Apply[Tooltip[

                    Button[#, SEUploader`Private`copyToClipboard[#2];
                    DialogReturn[], Appearance -> "Palette"], #2, TooltipDelay ->
                      Automatic]& ,
                    CurrentValue[
                      SEUploader`Private`pnb, {
                      TaggingRules, "ImageUploadHistory"}, {}], {1}], 9, ""], 3]]],
          Item[
            Row[{
              Spacer[200],
              Button[
                "Clear all",
                CurrentValue[
                  SEUploader`Private`pnb, {
                  TaggingRules, "ImageUploadHistory"}] = {}, ImageSize ->
                CurrentValue["DefaultButtonSize"]],
              Spacer[10],
              SEUploader`Private`closeButton[]}], Alignment -> Right]}],
        WindowTitle -> "History"];
      SEUploader`Private`uploadButton[] :=
        With[{SEUploader`Private`img = SEUploader`Private`rasterizeSelection1[]},

          If[SEUploader`Private`img === $Failed,
            Beep[],
            SEUploader`Private`uploadWithPreview[SEUploader`Private`img]]];
      SEUploader`Private`uploadPPButton[] :=
        With[{SEUploader`Private`img = SEUploader`Private`rasterizeSelection2[]},

          If[SEUploader`Private`img === $Failed,
            Beep[],
            SEUploader`Private`uploadWithPreview[SEUploader`Private`img]]];
      SEUploader`Private`uploadExpression[
        Pattern[SEUploader`Private`img,
          Blank[]]] := If[Head[SEUploader`Private`img] =!= Image,
        MessageDialog[
          StringJoin["Invalid selection.",
            ToString[SEUploader`Private`img]]],
        If[ByteCount[SEUploader`Private`img] / 2.^20 > 1.,
          MessageDialog["Expressions bigger then 1 MB are not allowed."],
          SEUploader`Private`uploadButtonAction[
            SEUploader`Private`img, "Get[\"http://goo.gl/NaH6rM\"][\"", "\"]"]]];
      SEUploader`Private`uploadButtonAction[
        Pattern[SEUploader`Private`img,
          Blank[]]] :=
        SEUploader`Private`uploadButtonAction[
          SEUploader`Private`img, "![Mathematica graphics](", ")"];
      SEUploader`Private`uploadButtonAction[
        Pattern[SEUploader`Private`img$,
          Blank[]],
        Pattern[SEUploader`Private`wrapStart$,
          Blank[String]],
        Pattern[SEUploader`Private`wrapEnd$,
          Blank[String]]] :=
        Module[{SEUploader`Private`url$, SEUploader`Private`markdown$},
          Check[SEUploader`Private`url$ =
            SEUploader`Private`stackImage[SEUploader`Private`img$],
            Return[]];
          SEUploader`Private`markdown$ =
            StringJoin[
              SEUploader`Private`wrapStart$, SEUploader`Private`url$,
              SEUploader`Private`wrapEnd$];
          SEUploader`Private`copyToClipboard[SEUploader`Private`markdown$];
          PrependTo[
            CurrentValue[
              SEUploader`Private`pnb, {TaggingRules, "ImageUploadHistory"}], {
            Thumbnail[
              Image[SEUploader`Private`img$]], SEUploader`Private`url$}];
          If[Length[
            CurrentValue[
              SEUploader`Private`pnb, {TaggingRules, "ImageUploadHistory"}]] > 9,
            CurrentValue[
              SEUploader`Private`pnb, {TaggingRules, "ImageUploadHistory"}] =
              Most[
                CurrentValue[
                  SEUploader`Private`pnb, {TaggingRules, "ImageUploadHistory"}]]];
          Null]; SEUploader`Private`screenHeight[] := -Apply[Subtract,
        Part[
          ReplaceAll[ScreenRectangle,
            Options[$FrontEnd, ScreenRectangle]], 2]];
      SEUploader`Private`uploadWithPreview[
        Pattern[SEUploader`Private`img,
          Blank[Image]]] := CreateDialog[
        Column[{
          Style[
            "Upload image to StackExchange network?\nThe URL/MarkDown will be \
copied to the clipboard.", Bold],
          Pane[
            Image[SEUploader`Private`img, Magnification -> 1], {Automatic,
            Min[SEUploader`Private`screenHeight[] - 140, 1 + Part[
              ImageDimensions[SEUploader`Private`img], 2]]}, Scrollbars ->
            Automatic, AppearanceElements -> {}, ImageMargins -> 0],
          Item[
            ChoiceButtons[{"Upload for site", "Upload for chat", "Close"}, {
              SEUploader`Private`uploadButtonAction[SEUploader`Private`img];
              DialogReturn[],
              SEUploader`Private`uploadButtonAction[
                SEUploader`Private`img, "", ""]; DialogReturn[],
              DialogReturn[]}], Alignment -> Right]}], WindowTitle ->
          "Upload image to StackExchange?"];
      SEUploader`Private`rasterizeSelection1[
        Optional[
          Pattern[SEUploader`Private`maxWidth,
            Blank[]], 650]] :=
        Module[{SEUploader`Private`target, SEUploader`Private`selection,
          SEUploader`Private`image},
          SEUploader`Private`selection = NotebookRead[
            SelectedNotebook[]]; If[
            MemberQ[
              Hold[{}, $Failed,
                NotebookRead[$Failed]], SEUploader`Private`selection], $Failed,
            SEUploader`Private`target =
              CreateDocument[{}, WindowSelected -> False, Visible -> False,
                WindowSize -> SEUploader`Private`maxWidth];
            NotebookWrite[
              SEUploader`Private`target, SEUploader`Private`selection];
            SEUploader`Private`image =
              Rasterize[SEUploader`Private`target, "Image"];
            NotebookClose[SEUploader`Private`target]; SEUploader`Private`image]];
      SEUploader`Private`rasterizeSelection2[] := If[
        MemberQ[
          Hold[{}, $Failed,
            NotebookRead[$Failed]],
          NotebookRead[
            SelectedNotebook[]]], $Failed,
        Module[{SEUploader`Private`tag}, FrontEndExecute[
          FrontEndToken[
            FrontEnd`SelectedNotebook[], "CopySpecial",
            If[$OperatingSystem === "Windows", "MGF", "TIFF"]]];
        Catch[ReplaceAll[
          NotebookGet[
            ClipboardNotebook[]], Pattern[SEUploader`Private`r,
            Blank[RasterBox]] :> Block[{},
            Condition[
              Throw[
                Image[
                  First[SEUploader`Private`r], "Byte", ColorSpace -> "RGB"],
                SEUploader`Private`tag], True]]]; $Failed,
          SEUploader`Private`tag]]];
      SEUploader`Private`encodeSelection[] :=
        With[{SEUploader`Private`expr = NotebookRead[
          SelectedNotebook[]]},
          If[
            Or[
              MemberQ[
                Hold[{}, $Failed,
                  NotebookRead[$Failed]], SEUploader`Private`expr],
              Not[
                Or[Head[SEUploader`Private`expr] === Cell,
                  MatchQ[SEUploader`Private`expr, {
                    Repeated[
                      Blank[Cell]]}]]]], $Failed,
            SETools`SEImageExpressionEncode`SEEncodeExpression[
              SEUploader`Private`expr]]];
      SEUploader`Private`encodeCurrentNotebook[] :=
        With[{SEUploader`Private`nb = NotebookGet[
          EvaluationNotebook[]]},
          If[Head[SEUploader`Private`nb] =!= Notebook, $Failed,
            SETools`SEImageExpressionEncode`SEEncodeExpression[
              SEUploader`Private`nb]]])]]]
},
  WindowSize -> All,
  WindowMargins -> {{Automatic, 0}, {Automatic, 0}},
  WindowElements -> {},
  WindowTitle -> "SE Uploader",
  TaggingRules -> {"ImageUploadHistory" -> {}},
  StyleDefinitions -> "Palette.nb"
]
